typedef struct s_redirection {
    int type;            // Redirection type (e.g., REDIR_IN, REDIR_OUT, etc.)
    char *target;        // File name or delimiter for here-docs
    struct s_redirection *next;
} t_redirection;

typedef struct s_ast_node {
    int type;                // CMD or PIPE (in this simplified example)
    char *cmd;               // Command name (e.g., "cat")
    char **args;             // Command arguments
    t_redirection *redirs;   // Linked list of redirections
    struct s_ast_node *left;
    struct s_ast_node *right;
} t_ast_node;

t_redirection *new_redirection(int type, char *target) {
    t_redirection *redir = malloc(sizeof(t_redirection));
    if (!redir)
        return NULL;
    redir->type = type;
    redir->target = strdup(target);
    redir->next = NULL;
    return redir;
}

void add_redirection(t_ast_node *node, int type, char *target) {
    t_redirection *redir = new_redirection(type, target);
    if (!redir)
        return;
    
    if (!node->redirs)
        node->redirs = redir;
    else {
        t_redirection *temp = node->redirs;
        while (temp->next)
            temp = temp->next;
        temp->next = redir;
    }
}

t_ast_node *parse_tokens(char **tokens) {
    t_ast_node *node = NULL;
    int cmd_index = -1;

    // First, scan for << to handle here-documents first if present
    for (int i = 0; tokens[i] != NULL; i++) {
        int redir_type = get_redir_type(tokens[i]);
        if (redir_type == HEREDOC) {
            if (tokens[i + 1] == NULL) {
                perror("Syntax error: missing delimiter for here-doc");
                exit(EXIT_FAILURE);
            }
            node = new_ast_node(CMD, NULL, NULL);  // Create a command node
            add_redirection(node, HEREDOC, tokens[i + 1]);  // Add here-doc redirection
            i++;  // Skip delimiter
            break;
        }
    }

    // Now scan for the first command and treat all preceding tokens as redirections
    for (int i = 0; tokens[i] != NULL; i++) {
        int redir_type = get_redir_type(tokens[i]);

        if (redir_type != -1) {  // It's a redirection
            if (tokens[i + 1] == NULL) {
                perror("Syntax error: missing file for redirection");
                exit(EXIT_FAILURE);
            }
            if (!node) node = new_ast_node(CMD, NULL, NULL);  // Init if not done already
            add_redirection(node, redir_type, tokens[i + 1]);  // Store redirection
            i++;  // Skip over the file
        } else {  // First non-redirection token is the command
            cmd_index = i;
            break;
        }
    }

    // If a command is found, initialize it
    if (cmd_index != -1) {
        if (!node) node = new_ast_node(CMD, tokens[cmd_index], slice_tokens(tokens, cmd_index + 1, -1));
        else {  // Otherwise, set command info in existing node
            node->cmd = tokens[cmd_index];
            node->args = slice_tokens(tokens, cmd_index + 1, -1);
        }
    }

    return node;
}